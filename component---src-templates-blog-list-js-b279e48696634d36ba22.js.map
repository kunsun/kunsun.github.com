{"version":3,"sources":["webpack:///./src/components/Paginator/index.jsx","webpack:///./src/templates/blog-list.js"],"names":["Paginator","start","len","step","currentPage","numPages","limit","previousPage","skip","pagesRange","Array","fill","undefined","map","_","i","toFixed","truncatedRange","slice","unshift","splice","length","push","className","Set","page","key","to","n","BlogList","edges","data","allMarkdownRemark","pageContext","Posts","filter","edge","node","frontmatter","date","PostLink","id","post","Layout","Header"],"mappings":"8MAqEeA,G,UA1DG,SAAC,GAKZ,IAZQC,EAAOC,EAAKC,EAQzBC,EAII,EAJJA,YAEAC,GAEI,EAHJC,MAGI,EAFJD,UAGME,GADF,EADJC,KAEqC,IAAhBJ,EAAoBA,EAAcA,EAAc,GAC/DK,GAdOR,EAcYM,OAdb,IAAaJ,MAAO,IAAZD,EAcmBG,EAAW,EAAIE,GAZlD,IAAIG,MAAMR,GACPS,UAAKC,GACLC,KAAI,SAACC,EAAGC,GAAJ,QAAYd,EAAQc,EAAIZ,GAAMa,QAAQ,MAC7C,IAUEC,EAAiBR,EAAWS,MAAM,EAAGb,GAEvCI,EAAW,GAAK,GAClBQ,EAAeE,QAAQ,MAErBV,EAAW,GAAK,GAClBQ,EAAeE,QAAQ,GAGrBV,EAAW,GAAK,IAAMJ,GAAYI,EAAW,GAAK,EAAI,GACxDQ,EAAeG,OACbX,EAAWY,OAAS,EAAIhB,EACxB,EACAI,EAAW,GAAK,GAIhBA,EAAW,GAAKJ,EAAWA,GAC7BY,EAAeK,KAAK,MAGlBb,EAAW,GAAKJ,EAAW,EAAIA,GACjCY,EAAeK,KAAKjB,GAOtB,OACE,yBAAKkB,UAAU,aAEX,YAAI,IAAIC,IAAIP,IAAiBJ,KAAI,SAACY,EAAMV,GAAP,OACtB,OAATU,EACE,yBAAKF,UAAU,UAAf,OAEA,kBAAC,IAAD,CACEG,IAAG,iBAAmBD,EACtBE,IAbSC,EAaOH,EAZb,IAANG,EAAU,IAAM,SAAgBA,GAa7BL,UAAS,mBAAoBnB,IAAgBqB,EAAO,SAAW,KAE9DA,GAhBO,IAACG,Q,UCjBRC,UAnBE,SAAC,GAKX,IAHkBC,EAGnB,EAJJC,KACEC,kBAAqBF,MAEvBG,EACI,EADJA,YAEMC,EAAQJ,EACXK,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYC,QACvC1B,KAAI,SAAAuB,GAAI,OAAI,kBAACI,EAAA,EAAD,CAAUd,IAAKU,EAAKC,KAAKI,GAAIC,KAAMN,EAAKC,UAEvD,OAAO,kBAACM,EAAA,EAAD,KACL,kBAACC,EAAA,EAAD,MACA,yBAAKrB,UAAU,aACZW,EACD,kBAAC,EAAcD,O","file":"component---src-templates-blog-list-js-b279e48696634d36ba22.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport './index.css';\n\nconst range = (start, len, step = 1) =>\n  len\n    ? new Array(len)\n        .fill(undefined)\n        .map((_, i) => +(start + i * step).toFixed(4))\n    : [];\n\nconst Paginator = ({\n  currentPage,\n  limit,\n  numPages,\n  skip,\n}) => {\n  const previousPage = currentPage === 1 ? currentPage : currentPage - 1;\n  const pagesRange = range(previousPage, numPages + 1 - previousPage);\n  const truncatedRange = pagesRange.slice(0, numPages);\n\n  if (pagesRange[0] > 2) {\n    truncatedRange.unshift(null);\n  }\n  if (pagesRange[0] > 1) {\n    truncatedRange.unshift(1);\n  }\n\n  if (pagesRange[0] + 1 === numPages && pagesRange[0] - 1 > 0) {\n    truncatedRange.splice(\n      pagesRange.length - 1 - numPages,\n      0,\n      pagesRange[0] - 1,\n    );\n  }\n\n  if (pagesRange[0] + numPages < numPages) {\n    truncatedRange.push(null);\n  }\n\n  if (pagesRange[0] + numPages - 1 < numPages) {\n    truncatedRange.push(numPages);\n  }\n\n  const getFullPath = (n) => {\n    return n === 1 ? '/' : '/' + \"blog/\" + n;\n  };\n\n  return (\n    <div className=\"paginator\">\n      {\n        [...new Set(truncatedRange)].map((page, i) =>\n          page === null ? (\n            <div className=\"spacer\">...</div>\n          ) : (\n            <Link\n              key={`PaginatorPage_${page}`}\n              to={getFullPath(page)}\n              className={`paginator-link ${currentPage === page ? 'active' : ''}` }\n            >\n              {page}\n            </Link>\n          ),\n        )\n      }\n    </div>\n  )\n}\n\nexport default Paginator;","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/PostLink\";\nimport Header from '../components/Header';\nimport Layout from '../components/Layout';\nimport Paginator from '../components/Paginator';\nimport '../css/blog_list.css';\n\nconst BlogList = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  pageContext,\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date)\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return <Layout>\n    <Header />\n    <div className=\"post-list\">\n      {Posts}\n      <Paginator {...pageContext} />\n    </div>\n  </Layout>\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] },\n      limit: $limit\n      skip: $skip\n      ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 180)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            tags\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 70) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}