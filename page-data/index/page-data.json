{"componentChunkName":"component---src-templates-blog-list-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"953e0fdb-e312-5fd2-ac4c-d11d65ccad7d","excerpt":"默认 box-sizing: content-box;  计算content\nbox-sizing: border-box;  计算border+padding+content BFC / Block Formatting Context 一个BFC是一个独立容器，决定了元素如何对其内容进行定位，以及与其他元素的关系与相互作用。\n相关链接：https…","frontmatter":{"date":"February 02, 2021","path":"/css","title":"CSS知识点","tags":["CSS"],"banner":null}}},{"node":{"id":"e1a4784d-4cbd-5d62-aed3-7fa7f4496015","excerpt":"不刷新浏览器 不进行IO操作，放在内存中 webpack中配合HotModuleReplacementPlugin插件 也可以用webpack-dev-middleware，更加灵活 参考文章：\nhttps://zhuanlan.zhihu.com/p/30669007\nhttps://juejin.im/post/5de0cfe46fb9a071665d…","frontmatter":{"date":"February 02, 2021","path":"/hmr","title":"热更新 Hot Module Replacement","tags":["Webpack"],"banner":null}}},{"node":{"id":"d4967c5b-7624-5dcc-880c-ece79e21deab","excerpt":"这个文章讲的特别清楚：https://juejin.im/post/6844903545272041479 https相比http…","frontmatter":{"date":"February 02, 2021","path":"/https-learn","title":"HTTPS学习","tags":["计算机网络","HTTPS"],"banner":null}}},{"node":{"id":"24ff2456-6d87-5bd4-a2fc-48e65a957964","excerpt":"uglify擦除无用代码 概念 去掉dead code\nDCE  dead code elimination 代码不会被执行 代码执行的结果不会被用到 代码只会影响死变量 webpack配置 webpack4的mode设置为production自动开启tree-shaking 原理 利用ES6模块化，ES6模块的特点： import…","frontmatter":{"date":"February 02, 2021","path":"/tree-shaking","title":"Tree Shaking","tags":["Webpack"],"banner":null}}},{"node":{"id":"473aa630-6f17-54d5-abd7-67e0841d0dc3","excerpt":"Loader 定义：loader只是一个Javascript模块，此函数导出为函数 多个loader串行执行，从后到前执行，类似Compose webpack打包结果分析 打包结果就是一个IIFE，称之为webpackBootstrap，参数是modules：modules 对象的 key 是依赖路径，value…","frontmatter":{"date":"February 02, 2021","path":"/webpack","title":"Webpack","tags":["Webpack"],"banner":null}}},{"node":{"id":"e0e71e33-2978-591e-ba5a-bc9502f4b9ea","excerpt":"参考书：https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content…","frontmatter":{"date":"February 02, 2021","path":"/functional-programing","title":"函数式编程","tags":["函数式编程","Javascript"],"banner":null}}},{"node":{"id":"55d65724-f140-564c-8f34-21d67cf8f09e","excerpt":"典型的方案： 传统 float 浮动布局 相对单位布局 媒体查询 基于相对单位 rem 的 flexible 布局 flex 布局 grid 布局 借助 JavaScript CSS中的相对单位 em rem vh, vw, wmin, wmax % calc() 各种单位概念 屏幕分辨率 像素 PPI 每英寸包括的像素数 DPI…","frontmatter":{"date":"February 02, 2021","path":"/responsible","title":"响应式布局","tags":["Web"],"banner":null}}},{"node":{"id":"9e64d900-fd28-5c3b-867f-5f61dab97127","excerpt":"地址数据: 父组件样式 地址选择组件样式 地址选择逻辑 更新value： 保留当前step之前的选择，其余删除 更新step 更新list Tab切换逻辑 更新step 更新list","frontmatter":{"date":"February 02, 2021","path":"/address-component","title":"地址选择组件的开发","tags":["React","Component"],"banner":null}}},{"node":{"id":"a9ca1bd9-c579-5c6c-9862-869414e59bfc","excerpt":"性能优化其实是一个开放式问题，非常依赖实践 前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。 页面工程优化 网络协议 资源配置 浏览器性能 缓存 单页面应用的按需加载 延迟按需加载是有统计数据支持的 工程优化方向还有： 图片懒加载 合理设置缓存策略 使用prefetch / preload…","frontmatter":{"date":"February 02, 2021","path":"/performance","title":"性能优化","tags":["性能优化","前端工程化"],"banner":null}}},{"node":{"id":"de85f2fd-9d73-57ad-ba92-af00d110157c","excerpt":"React.js小书： http://huziketang.mangojuice.top/books/react/ react fiber 时间分片 这可能是最通俗的 React Fiber(时间分片) 打开方式：https://juejin.im/post/5dadc6045188255a270a0f85 Deep In React之浅谈 React…","frontmatter":{"date":"February 02, 2021","path":"/react-points","title":"指引表-React知识点","tags":["React"],"banner":null}}}]}},"pageContext":{"limit":10,"skip":0,"numPages":2,"currentPage":1}},"staticQueryHashes":[]}