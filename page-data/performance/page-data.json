{"componentChunkName":"component---src-templates-blog-post-js","path":"/performance","result":{"data":{"markdownRemark":{"html":"<p>性能优化其实是一个开放式问题，非常依赖实践</p>\n<blockquote>\n<p>前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。</p>\n</blockquote>\n<h2>页面工程优化</h2>\n<ol>\n<li>网络协议</li>\n<li>资源配置</li>\n<li>浏览器性能</li>\n<li>缓存</li>\n</ol>\n<p>单页面应用的按需加载</p>\n<p>延迟按需加载是有统计数据支持的</p>\n<p>工程优化方向还有：</p>\n<ol>\n<li>图片懒加载</li>\n<li>合理设置缓存策略</li>\n<li>使用prefetch / preload预加载等特性</li>\n<li>以 tree shaking 手段为主的代码瘦身</li>\n</ol>\n<h3>如果发现页面动画卡顿，有哪些解决办法：</h3>\n<ol>\n<li>CSS3动画会比基于Javascript动画效率高</li>\n<li>在使用 CSS3 实现动画时，考虑开启 GPU 加速</li>\n<li>优先使用消耗最低的 transform 和 opacity 两个属性</li>\n<li>对于只能使用 JavaScript 实现动画效果的情况，考虑 requestAnimationFrame、requestIdleCallback API</li>\n<li>批量进行样式变换，减少布局抖动</li>\n</ol>\n<p>如何理解 requestAnimationFrame 和 60 fps\n如何实现 requestAnimationFrame polyfill\n哪些操作会触发浏览器 reflow（重排）或者 repaint（重绘）\n对于给出的代码，如何进行优化\n如何实现滚动时的节流、防抖函数</p>\n<h2>代码细节优化</h2>\n<h3>布局抖动问题</h3>\n<p>布局抖动是指 DOM 元素被 JavaScript 多次反复读写，导致文档多次无意义重排。我们知道浏览器很“懒”，它会收集（batch）当前操作，统一进行重排。</p>\n<h3>window.requestAnimationFrame</h3>\n<blockquote>\n<p>该方法告诉浏览器你希望执行的操作，并请求浏览器在下一次重绘之前调用指定的函数来更新。</p>\n</blockquote>\n<p>requestAnimationFrame是在主线程上完成</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">window</span><span class=\"mtk1\">.</span><span class=\"mtk3\">requestAnimationFrame</span><span class=\"mtk1\">(</span><span class=\"mtk4\">callback</span><span class=\"mtk1\">)</span></span></code></pre>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 读</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk4\">h1</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">element1</span><span class=\"mtk1\">.</span><span class=\"mtk4\">clientHeight</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 写</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">requestAnimationFrame</span><span class=\"mtk1\">(() </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">element1</span><span class=\"mtk1\">.</span><span class=\"mtk4\">style</span><span class=\"mtk1\">.</span><span class=\"mtk4\">height</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">h1</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;px&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 读</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk4\">h2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">element2</span><span class=\"mtk1\">.</span><span class=\"mtk4\">clientHeight</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 写</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">requestAnimationFrame</span><span class=\"mtk1\">(() </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">element2</span><span class=\"mtk1\">.</span><span class=\"mtk4\">style</span><span class=\"mtk1\">.</span><span class=\"mtk4\">height</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">h2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;px&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 读</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk4\">h3</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">element3</span><span class=\"mtk1\">.</span><span class=\"mtk4\">clientHeight</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 写</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">requestAnimationFrame</span><span class=\"mtk1\">(() </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">element3</span><span class=\"mtk1\">.</span><span class=\"mtk4\">style</span><span class=\"mtk1\">.</span><span class=\"mtk4\">height</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">h3</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;px&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span></code></pre>\n<h2>aync与defer的区别</h2>\n<p>async 加载完立刻执行，加载js与文档可以异步执行， 不考虑依赖，例如ga\ndefer 是在文档加载之后才执行</p>\n<p>fetch和ajax 的主要区别\n1、fetch()返回的promise将不会拒绝http的错误状态，即使响应是一个HTTP 404或者500\n2、在默认情况下 fetch不会接受或者发送cookies</p>\n<p>reportWebVitals： <a href=\"https://segmentfault.com/a/1190000023223274\">https://segmentfault.com/a/1190000023223274</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .material-theme {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .material-theme .mtki { font-style: italic; }\n  .material-theme .mtk4 { color: #E06C75; }\n  .material-theme .mtk1 { color: #ABB2BF; }\n  .material-theme .mtk3 { color: #61AFEF; }\n  .material-theme .mtk5 { color: #7F848E; }\n  .material-theme .mtk10 { color: #C678DD; }\n  .material-theme .mtk8 { color: #56B6C2; }\n  .material-theme .mtk7 { color: #D19A66; }\n  .material-theme .mtk6 { color: #98C379; }\n</style>","frontmatter":{"date":"February 02, 2021","path":"/performance","title":"性能优化"}}},"pageContext":{}},"staticQueryHashes":[]}