{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack","result":{"data":{"markdownRemark":{"html":"<h2>Loader</h2>\n<p>定义：loader只是一个Javascript模块，此函数导出为函数</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">module</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exports</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">source</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">source</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span></code></pre>\n<p>多个loader串行执行，从后到前执行，类似Compose</p>\n<h2>webpack打包结果分析</h2>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">(</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">modules</span><span class=\"mtk1\">){</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// ...</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk6\">&quot;./src/hello.js&quot;</span><span class=\"mtk1\">: (</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(){</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// ...</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk6\">&quot;./src/index.js&quot;</span><span class=\"mtk1\">: (</span><span class=\"mtk10\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// ...</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  })</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span></code></pre>\n<ol>\n<li>打包结果就是一个IIFE，称之为webpackBootstrap，参数是modules：modules 对象的 key 是依赖路径，value 是经过简单处理后的脚本</li>\n<li>打包结果中，定义了一个重要的模块加载函数 <strong>webpack_require</strong></li>\n<li>我们首先使用 <strong>webpack_require</strong> 加载函数去加载入口模块 ./src/index.js</li>\n<li>加载函数\b <strong>webpack_require</strong> 使用了闭包变量 installedModules，它的作用是将已加载过的模块结果保存在内存中。</li>\n</ol>\n<h2>webpack工作的基本原理</h2>\n<ol>\n<li>配置读取：读取webpack.config.js的配置、或者命令行</li>\n<li>实例化所需的webpack插件，在webpack时间流上挂载钩子，这样在合适的构建过程中，插件具备了改动产出结果的能力</li>\n<li>以入口文件为开始，进行依赖收集； 通过loader对依赖文件进行编译；编译好之后生成AST抽象语法树；分析文件依赖关系，将不同模块化语法替换为<strong>webpack_require</strong>,使用自己的加载器进行模块化实现</li>\n<li>产出结果，依据开发者的配置，将结果打包到目录下</li>\n</ol>\n<p>webpack和插件采用基于事件流的发布订阅模式，监听某些关键过程，在这些环节中执行插件任务。</p>\n<h2>执行步骤：</h2>\n<ol>\n<li>加载 loaded</li>\n<li>封存 sealed</li>\n<li>优化 optimized</li>\n<li>分块 chunked</li>\n<li>哈希 hashed</li>\n<li>重新创建 restored </li>\n</ol>\n<h2>抽象语法树AST</h2>\n<p>可以用obj表示，分析代码的依赖关系</p>\n<h2>compiler 和 compilation</h2>\n<p>webpack 的构建过程是通过 compiler 控制流程，compilation 进行解析。在开发插件时，我们可以从 compiler 对象中拿到所有和 webpack 主环境相关的内容，包括事件钩子。</p>\n<p>compiler 对象和 compilation 对象都继承自 tapable，tapable.js 这个库暴露了所有和事件相关的 pub/sub 的方法。</p>\n<h3>compiler对象</h3>\n<p>webpack的骨架，或中枢神经。\n它的实例包含了完整的webpack配置，全局只有一个compiler实例，\n暴露了很多钩子Hooks：</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk5 mtki\">//基本写法</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">someHook</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(...)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 读取entry配置完成后</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">entryOption</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(...)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk5 mtki\">// 资源输出之前</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">emit</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(...)</span></span></code></pre>\n<h3>compilation对象</h3>\n<p>当 webpack 以开发模式运行时，每当检测到文件变化，一个新的 compilation 对象将被创建。这个对象包含了当前的模块资源、编译生成资源、变化的文件等信息。也就是说，所有构建过程中产生的构建数据都存储在该对象上，它也掌控着构建过程中的每一个环节。该对象也提供了很多事件回调供插件做扩展。\ncompilation 也暴露了与模块和依赖有关的粒度更小的钩子:</p>\n<h2>Loader</h2>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk11\">module</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exports</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">source</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 获取开发者配置的 options</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">options</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">loaderUtils</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getOptions</span><span class=\"mtk1\">(</span><span class=\"mtk11\">this</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// some magic...</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// return content</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk3\">callback</span><span class=\"mtk1\">(</span><span class=\"mtk7\">null</span><span class=\"mtk1\">, </span><span class=\"mtk4\">content</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>Plugin</h2>\n<p>我们反复提到过 webpack 事件流机制，也就是说在 webpack 构建的生命周期中，会广播许多事件。\nloader 和 plugin 的差异：</p>\n<ol>\n<li>loader 其实就是一个转换器，执行单纯的文件转换操作。</li>\n<li>plugin 是一个扩展器，它丰富了 webpack 本身，在 loader 过程结束后，webpack 打包的整个过程中，weback plugin 并不直接操作文件，而是基于事件机制工作，监听 webpack 打包过程中的某些事件，见缝插针，修改打包结果。</li>\n</ol>\n<p>一个自定义webpack plugin的骨架结构就是一个带有apply方法的class：</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">class</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CustomPlugin</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">options</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">options</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">options</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">compiler</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">// 相关钩子注册回调</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">someHook</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;CustomPlugin&#39;</span><span class=\"mtk1\">, () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            </span><span class=\"mtk5 mtki\">// magic here...</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        })</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">// 打印出此时 compiler 暴露的钩子</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">for</span><span class=\"mtk1\">(</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk4\">hook</span><span class=\"mtk1\"> </span><span class=\"mtk10\">of</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk3\">keys</span><span class=\"mtk1\">(</span><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">)){</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">hook</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">module</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exports</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">customPlugin</span></span></code></pre>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">class</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CustomPlugin</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">options</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">options</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">options</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">compiler</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">compiler</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">compilation</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;CustomPlugin&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">compilation</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">callback</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">compilation</span><span class=\"mtk1\">.</span><span class=\"mtk4\">hooks</span><span class=\"mtk1\">.</span><span class=\"mtk4\">someOtherHook</span><span class=\"mtk1\">.</span><span class=\"mtk3\">tap</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;SomePlugin&#39;</span><span class=\"mtk1\">,</span><span class=\"mtk10\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">                </span><span class=\"mtk5 mtki\">// some magic here</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            })</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        })</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">module</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exports</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">customPlugin</span></span></code></pre>\n<p>实现webpack plugin的套路：</p>\n<ol>\n<li>定义一个 JavaScript class 函数，或在函数原型（prototype）中定义一个以 compiler 对象为参数的 apply 方法。</li>\n<li>apply 函数中通过 compiler 插入指定的事件钩子，在钩子回调中拿到 compilation 对象。</li>\n<li>使用 compilation 操纵修改 webapack 打包内容。</li>\n</ol>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .material-theme {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .material-theme .mtki { font-style: italic; }\n  .material-theme .mtk1 { color: #ABB2BF; }\n  .material-theme .mtk11 { color: #E5C07B; }\n  .material-theme .mtk8 { color: #56B6C2; }\n  .material-theme .mtk10 { color: #C678DD; }\n  .material-theme .mtk4 { color: #E06C75; }\n  .material-theme .mtk5 { color: #7F848E; }\n  .material-theme .mtk6 { color: #98C379; }\n  .material-theme .mtk3 { color: #61AFEF; }\n  .material-theme .mtk7 { color: #D19A66; }\n</style>","frontmatter":{"date":"February 02, 2021","path":"/webpack","title":"Webpack"}}},"pageContext":{}},"staticQueryHashes":[]}