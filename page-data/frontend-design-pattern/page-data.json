{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontend-design-pattern","result":{"data":{"markdownRemark":{"html":"<p>六大原则：</p>\n<ol>\n<li>开闭原则： 对扩展开放，对修改关闭</li>\n<li>里氏替换：任何基类可以发挥作用的地方，子类一定可以发挥作用。 继承复用。 里氏替换原则是开闭原则的补充。</li>\n<li>依赖反转原则：针对接口编程，依赖于抽象</li>\n<li>接口隔离原则：减少耦合</li>\n<li>最少知道原则： 一个系统的功能模块应该最大限度地不知晓其他模块的出现，减少感知，模块应相对独立。</li>\n<li>合成复用原则： 尽量使用合成 / 聚合的方式，而不是使用继承。 组合是非常优秀的编程思想，这一点在函数式编程范畴中得到了最大程度的印证。</li>\n</ol>\n<p>三大类型：</p>\n<ol>\n<li>创建型</li>\n<li>结构型</li>\n<li>行为型</li>\n</ol>\n<p>创建型：\n创建型的五种设计模式提供了更加灵活的对象创建方式，同时可以隐藏创建的具体逻辑。与直接使用 new 运算符实例化对象相比，这些模式具有更强的灵活性以及可定制性。</p>\n<p>结构型：\n结构型的七种设计模式关注类和对象的组合，结合继承的概念，这些设计模式能使得对象具有更加灵活的功能设定。</p>\n<p>行为型：\n行为型的十一种设计模式聚焦于对象和类之间的通信，这是构建大型程序架构必不可少的环节。</p>\n<p>参考网站：</p>\n<ol>\n<li><a href=\"https://github.com/DavidCai1993/JsPatterns-ES6\">https://github.com/DavidCai1993/JsPatterns-ES6</a></li>\n<li>《Learning JavaScript Design Patterns》： <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\">https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript</a></li>\n<li><a href=\"http://loredanacirstea.github.io/es6-design-patterns/#composite\">http://loredanacirstea.github.io/es6-design-patterns/#composite</a></li>\n</ol>\n<h2>工厂模式</h2>\n<p>创建型工厂模式：</p>\n<ol>\n<li>简单工厂模式（Simple Factory）</li>\n<li>工厂方法模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n</ol>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">class</span><span class=\"mtk1\"> </span><span class=\"mtk11\">jQuery</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">selector</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk11 mtki\">super</span><span class=\"mtk1\">(</span><span class=\"mtk4\">selector</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">//  ....</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">window</span><span class=\"mtk1\">.</span><span class=\"mtk3\">$</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">selector</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">jQuery</span><span class=\"mtk1\">(</span><span class=\"mtk4\">selector</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>单例模式</h2>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">class</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">constructor</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">!</span><span class=\"mtk4\">Singleton</span><span class=\"mtk1\">.</span><span class=\"mtk4\">instance</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">Singleton</span><span class=\"mtk1\">.</span><span class=\"mtk4\">instance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">this</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Singleton</span><span class=\"mtk1\">.</span><span class=\"mtk4\">instance</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>建造者模式</h2>\n<p>分步骤分情况构建一个复杂的对象</p>\n<h2>外观模式</h2>\n<p>例如：</p>\n<ol>\n<li>跨浏览器兼容性的封装</li>\n<li>$(document).ready</li>\n</ol>\n<h2>适配器模式</h2>\n<p>与外观模式思路类似，用于适配两个以上接口不兼容问题</p>\n<h2>享元模式</h2>\n<p>在前端中应用广泛，但是没太懂</p>\n<ol>\n<li>事件代理</li>\n<li>React 合成事件的池化机制</li>\n</ol>\n<h2>代理模式</h2>\n<p>ES6的 Proxy\nJQuery 的$.proxy也是代理模式的体现</p>\n<h2>装饰者模式</h2>\n<p>在不改变原对象的基础上，对其对象进行包装和拓展，使原对象能够应对更加复杂的需求\n例子：</p>\n<ol>\n<li>\n<p>connect</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">export</span><span class=\"mtk1\"> </span><span class=\"mtk10\">default</span><span class=\"mtk1\"> </span><span class=\"mtk3\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk4\">mapStateToProps</span><span class=\"mtk1\">,</span><span class=\"mtk4\">actionCreators</span><span class=\"mtk1\">)(</span><span class=\"mtk4\">App</span><span class=\"mtk1\">);</span></span></code></pre>\n</li>\n<li>\n<p>antd form</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">class</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CustomizedForm</span><span class=\"mtk1\"> </span><span class=\"mtk10\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk11\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Component</span><span class=\"mtk1\"> {}</span></span></code></pre>\n</li>\n</ol>\n<p>CustomizedForm = Form.create({})(CustomizedForm)</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">## 职责链模式</span>\n<span class=\"grvsc-line\">建立一个流程链条，一个请求从一端进入，并从一个职责根据需求，流转进入另一个对象，直到找到合适的处理程序</span>\n<span class=\"grvsc-line\">有点“中间件”的思想</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">## 策略模式</span>\n<span class=\"grvsc-line\">环境类 + 策略</span>\n<span class=\"grvsc-line\">例子：</span>\n<span class=\"grvsc-line\">1. V8 排序算法</span>\n<span class=\"grvsc-line\">2. 验证器</span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .material-theme {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .material-theme .mtki { font-style: italic; }\n  .material-theme .mtk10 { color: #C678DD; }\n  .material-theme .mtk1 { color: #ABB2BF; }\n  .material-theme .mtk11 { color: #E5C07B; }\n  .material-theme .mtk4 { color: #E06C75; }\n  .material-theme .mtk5 { color: #7F848E; }\n  .material-theme .mtk3 { color: #61AFEF; }\n  .material-theme .mtk8 { color: #56B6C2; }\n</style>","frontmatter":{"date":"February 02, 2021","path":"/frontend-design-pattern","title":"前端设计模式"}}},"pageContext":{}},"staticQueryHashes":[]}