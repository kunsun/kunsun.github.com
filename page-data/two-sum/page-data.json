{"componentChunkName":"component---src-templates-blog-post-js","path":"/two-sum","result":{"data":{"markdownRemark":{"html":"<p>两数之和是一个最基础的算法，今天由浅入深的分析下这个问题。</p>\n<h2>1.0 基础版 普通数组的两数之和</h2>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<h3>示例:</h3>\n<pre class=\"grvsc-container material-theme\" data-language=\"log\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">给定 nums = [</span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">7</span><span class=\"mtk1\">, </span><span class=\"mtk7\">11</span><span class=\"mtk1\">, </span><span class=\"mtk7\">15</span><span class=\"mtk1\">], target = </span><span class=\"mtk7\">9</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">因为 nums[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] + nums[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">7</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">9</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">所以返回 [</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">]</span></span></code></pre>\n<h3>思路</h3>\n<p>第一种思路，典型的双循环，每个元素都与其他元素进行一个组合，找到第一个符合条件的。</p>\n<p>第二种思路，一次遍历，使用一个map存储，key为数组的值，value为索引。当遍历到某个元素时，查看对应的值是否存在，如果存在，则返回。</p>\n<h3>解答</h3>\n<pre class=\"grvsc-container material-theme\" data-language=\"jsx\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">twoSum</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">nums</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">map</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> {};</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">for</span><span class=\"mtk1\">(</span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">i</span><span class=\"mtk8\">=</span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\">nums</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk8\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">key</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">target</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nums</span><span class=\"mtk1\">[</span><span class=\"mtk4\">i</span><span class=\"mtk1\">];</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">element</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nums</span><span class=\"mtk1\">[</span><span class=\"mtk4\">i</span><span class=\"mtk1\">];</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">map</span><span class=\"mtk1\">[</span><span class=\"mtk4\">element</span><span class=\"mtk1\">] </span><span class=\"mtk8\">===</span><span class=\"mtk1\"> </span><span class=\"mtk7\">undefined</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">map</span><span class=\"mtk1\">[</span><span class=\"mtk4\">key</span><span class=\"mtk1\">] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">i</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">map</span><span class=\"mtk1\">[</span><span class=\"mtk4\">element</span><span class=\"mtk1\">], </span><span class=\"mtk4\">i</span><span class=\"mtk1\">];</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>2.0 进阶版，有序数组的两数之和</h2>\n<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<h3>说明:</h3>\n<p>返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n<h3>示例:</h3>\n<pre class=\"grvsc-container material-theme\" data-language=\"log\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">输入: numbers = [</span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">7</span><span class=\"mtk1\">, </span><span class=\"mtk7\">11</span><span class=\"mtk1\">, </span><span class=\"mtk7\">15</span><span class=\"mtk1\">], target = </span><span class=\"mtk7\">9</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">输出: [</span><span class=\"mtk7\">1</span><span class=\"mtk1\">,</span><span class=\"mtk7\">2</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">解释: </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> 与 </span><span class=\"mtk7\">7</span><span class=\"mtk1\"> 之和等于目标数 </span><span class=\"mtk7\">9</span><span class=\"mtk1\"> 。因此 index1 = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, index2 = </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> 。</span></span></code></pre>\n<h3>思路：</h3>\n<p>注意是有序数组，所以可以给定双指针，一个指向头部，一个指向尾部，当指针所指向的元素之和大于target，则可以移动大元素的指针向前，反之移动小元素的指针向后，直到和为target。</p>\n<h3>解答：</h3>\n<pre class=\"grvsc-container material-theme\" data-language=\"jsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk3\">twoSum</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">numbers</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">len</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">len</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">while</span><span class=\"mtk1\">(</span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">start</span><span class=\"mtk1\">] </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">end</span><span class=\"mtk1\">] </span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">start</span><span class=\"mtk1\">] </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">end</span><span class=\"mtk1\">] </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<h2>3.0 两数之和 III - 数据结构设计</h2>\n<p>本题属于leetcode会员才能看的，是一个类的设计题，以后要是成为leetcode会员再来补上。</p>\n<h2>4.0 终极版 BST的两数之和</h2>\n<p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>\n<p>案例 1:</p>\n<p>输入:</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"log\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">5</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">   / \\</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">   </span><span class=\"mtk7\">6</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\"> / \\   \\</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk7\">2</span><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">   </span><span class=\"mtk7\">7</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">Target = </span><span class=\"mtk7\">9</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">输出: True</span></span></code></pre>\n<p>案例 2:</p>\n<pre class=\"grvsc-container material-theme\" data-language=\"log\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">输入: </span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">5</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">   / \\</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">   </span><span class=\"mtk7\">6</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\"> / \\   \\</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk7\">2</span><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">   </span><span class=\"mtk7\">7</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">Target = </span><span class=\"mtk7\">28</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">输出: False</span></span></code></pre>\n<h3>思路</h3>\n<p>BST搜索二叉树的特点就是中序遍历后会得到一个有序数组。所以可以先中序遍历，后使用之前的方法。</p>\n<h3>解答</h3>\n<pre class=\"grvsc-container material-theme\" data-language=\"jsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk3\">findTarget</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">root</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">k</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">arr</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [];</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk3\">getTree</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">root</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">root</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">getTree</span><span class=\"mtk1\">(</span><span class=\"mtk4\">root</span><span class=\"mtk1\">.</span><span class=\"mtk4\">left</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk3\">push</span><span class=\"mtk1\">(</span><span class=\"mtk4\">root</span><span class=\"mtk1\">.</span><span class=\"mtk4\">val</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">getTree</span><span class=\"mtk1\">(</span><span class=\"mtk4\">root</span><span class=\"mtk1\">.</span><span class=\"mtk4\">right</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">getTree</span><span class=\"mtk1\">(</span><span class=\"mtk4\">root</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">twoSum</span><span class=\"mtk1\">(</span><span class=\"mtk4\">arr</span><span class=\"mtk1\">, </span><span class=\"mtk4\">k</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk3\">twoSum</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">numbers</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">len</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">len</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">while</span><span class=\"mtk1\">(</span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">start</span><span class=\"mtk1\">] </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">end</span><span class=\"mtk1\">] </span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">end</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">start</span><span class=\"mtk1\">] </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">numbers</span><span class=\"mtk1\">[</span><span class=\"mtk4\">end</span><span class=\"mtk1\">] </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">true</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">false</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .material-theme {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .material-theme .mtki { font-style: italic; }\n  .material-theme .mtk1 { color: #ABB2BF; }\n  .material-theme .mtk7 { color: #D19A66; }\n  .material-theme .mtk10 { color: #C678DD; }\n  .material-theme .mtk3 { color: #61AFEF; }\n  .material-theme .mtk4 { color: #E06C75; }\n  .material-theme .mtk8 { color: #56B6C2; }\n  .material-theme .mtk11 { color: #E5C07B; }\n</style>","frontmatter":{"date":"July 06, 2020","path":"/two-sum","title":"两数之和"}}},"pageContext":{}},"staticQueryHashes":[]}